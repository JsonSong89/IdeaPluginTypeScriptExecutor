package com.xiyuan.ts.setting.autoCompile;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.JBUI;
import com.xiyuan.ts.model.tuple.Tuple2;
import kotlin.jvm.functions.Function2;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.List;

/**
 * Created by xiyuan_fengyu on 2018/9/10 9:44.
 */
public class AutoCompileForm {
    private JPanel rootPanel;
    private JPanel autoCompileEnablePanel;
    private JScrollPane scrollPane;

    private AutoCompileToggleListener autoCompileToggleListener;

    JPanel getRootPanel() {
        return rootPanel;
    }

    public void setAutoCompileToggleListener(AutoCompileToggleListener autoCompileToggleListener) {
        this.autoCompileToggleListener = autoCompileToggleListener;
    }

    void loadAutoCompileEnables(List<Tuple2<String, Boolean>> moduleCompileEnables) {
        autoCompileEnablePanel.removeAll();
        int moduleSize = moduleCompileEnables.size();
        autoCompileEnablePanel.setLayout(new GridLayoutManager(moduleSize + 1, 1, JBUI.insets(4), -1, -1));
        for (int i = 0; i < moduleSize; i++) {
            Tuple2<String, Boolean> autoCompileEnable = moduleCompileEnables.get(i);
            JCheckBox autoCompileEnableCB = new JCheckBox(autoCompileEnable.t1, autoCompileEnable.t2);
            autoCompileEnableCB.addChangeListener(e -> {
                if (autoCompileToggleListener != null) {
                    autoCompileToggleListener.apply(autoCompileEnable.t1, autoCompileEnableCB.isSelected());
                }
            });

            autoCompileEnablePanel.add(autoCompileEnableCB, new GridConstraints(i, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        }
        autoCompileEnablePanel.add(new Spacer(), new GridConstraints(moduleSize, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        autoCompileEnablePanel.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Toggle auto compile for typescript configs");
        rootPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        scrollPane.setVerticalScrollBarPolicy(20);
        rootPanel.add(scrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
        autoCompileEnablePanel = new JPanel();
        autoCompileEnablePanel.setLayout(new GridLayoutManager(1, 1, new Insets(4, 4, 4, 4), -1, -1));
        autoCompileEnablePanel.setEnabled(true);
        scrollPane.setViewportView(autoCompileEnablePanel);
        autoCompileEnablePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-1)));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    @FunctionalInterface
    public interface AutoCompileToggleListener {

        void apply(String configFileRelativePath, Boolean selected);

    }

}
